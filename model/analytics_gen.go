package model

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Country) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "iso_code":
			z.ISOCode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ISOCode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Country) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "iso_code"
	err = en.Append(0x81, 0xa8, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ISOCode)
	if err != nil {
		err = msgp.WrapError(err, "ISOCode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Country) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "iso_code"
	o = append(o, 0x81, 0xa8, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.ISOCode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Country) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "iso_code":
			z.ISOCode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ISOCode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Country) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.ISOCode)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FutureRecord) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "method":
			z.Method, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "host":
			z.Host, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "raw_path":
			z.RawPath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RawPath")
				return
			}
		case "content_length":
			z.ContentLength, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ContentLength")
				return
			}
		case "user_agent":
			z.UserAgent, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
		case "day":
			z.Day, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Day")
				return
			}
		case "month":
			z.Month, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Month")
				return
			}
		case "year":
			z.Year, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Year")
				return
			}
		case "hour":
			z.Hour, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Hour")
				return
			}
		case "response_code":
			z.ResponseCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ResponseCode")
				return
			}
		case "api_key":
			z.APIKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIKey")
				return
			}
		case "timestamp":
			z.TimeStamp, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "TimeStamp")
				return
			}
		case "api_version":
			z.APIVersion, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIVersion")
				return
			}
		case "api_name":
			z.APIName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIName")
				return
			}
		case "api_id":
			z.APIID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIID")
				return
			}
		case "org_id":
			z.OrgID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OrgID")
				return
			}
		case "oauth_id":
			z.OauthID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OauthID")
				return
			}
		case "request_time":
			z.RequestTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RequestTime")
				return
			}
		case "raw_request":
			z.RawRequest, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RawRequest")
				return
			}
		case "raw_response":
			z.RawResponse, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RawResponse")
				return
			}
		case "ip_address":
			z.IPAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IPAddress")
				return
			}
		case "geo":
			err = z.Geo.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Geo")
				return
			}
		case "network":
			err = z.Network.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Network")
				return
			}
		case "latency":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Latency")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Latency")
					return
				}
				switch msgp.UnsafeString(field) {
				case "total":
					z.Latency.Total, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Latency", "Total")
						return
					}
				case "upstream":
					z.Latency.Upstream, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Latency", "Upstream")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Latency")
						return
					}
				}
			}
		case "tags":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0003) {
				z.Tags = (z.Tags)[:zb0003]
			} else {
				z.Tags = make([]string, zb0003)
			}
			for za0001 := range z.Tags {
				z.Tags[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
			}
		case "alias":
			z.Alias, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Alias")
				return
			}
		case "track_path":
			z.TrackPath, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "TrackPath")
				return
			}
		case "expireAt":
			z.ExpireAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ExpireAt")
				return
			}
		case "new_data":
			z.NewData, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "NewData")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FutureRecord) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 30
	// write "method"
	err = en.Append(0xde, 0x0, 0x1e, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	// write "host"
	err = en.Append(0xa4, 0x68, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Host)
	if err != nil {
		err = msgp.WrapError(err, "Host")
		return
	}
	// write "path"
	err = en.Append(0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// write "raw_path"
	err = en.Append(0xa8, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.RawPath)
	if err != nil {
		err = msgp.WrapError(err, "RawPath")
		return
	}
	// write "content_length"
	err = en.Append(0xae, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ContentLength)
	if err != nil {
		err = msgp.WrapError(err, "ContentLength")
		return
	}
	// write "user_agent"
	err = en.Append(0xaa, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserAgent)
	if err != nil {
		err = msgp.WrapError(err, "UserAgent")
		return
	}
	// write "day"
	err = en.Append(0xa3, 0x64, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Day)
	if err != nil {
		err = msgp.WrapError(err, "Day")
		return
	}
	// write "month"
	err = en.Append(0xa5, 0x6d, 0x6f, 0x6e, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Month)
	if err != nil {
		err = msgp.WrapError(err, "Month")
		return
	}
	// write "year"
	err = en.Append(0xa4, 0x79, 0x65, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Year)
	if err != nil {
		err = msgp.WrapError(err, "Year")
		return
	}
	// write "hour"
	err = en.Append(0xa4, 0x68, 0x6f, 0x75, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Hour)
	if err != nil {
		err = msgp.WrapError(err, "Hour")
		return
	}
	// write "response_code"
	err = en.Append(0xad, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ResponseCode)
	if err != nil {
		err = msgp.WrapError(err, "ResponseCode")
		return
	}
	// write "api_key"
	err = en.Append(0xa7, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIKey)
	if err != nil {
		err = msgp.WrapError(err, "APIKey")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteTime(z.TimeStamp)
	if err != nil {
		err = msgp.WrapError(err, "TimeStamp")
		return
	}
	// write "api_version"
	err = en.Append(0xab, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIVersion)
	if err != nil {
		err = msgp.WrapError(err, "APIVersion")
		return
	}
	// write "api_name"
	err = en.Append(0xa8, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIName)
	if err != nil {
		err = msgp.WrapError(err, "APIName")
		return
	}
	// write "api_id"
	err = en.Append(0xa6, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIID)
	if err != nil {
		err = msgp.WrapError(err, "APIID")
		return
	}
	// write "org_id"
	err = en.Append(0xa6, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.OrgID)
	if err != nil {
		err = msgp.WrapError(err, "OrgID")
		return
	}
	// write "oauth_id"
	err = en.Append(0xa8, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.OauthID)
	if err != nil {
		err = msgp.WrapError(err, "OauthID")
		return
	}
	// write "request_time"
	err = en.Append(0xac, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RequestTime)
	if err != nil {
		err = msgp.WrapError(err, "RequestTime")
		return
	}
	// write "raw_request"
	err = en.Append(0xab, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.RawRequest)
	if err != nil {
		err = msgp.WrapError(err, "RawRequest")
		return
	}
	// write "raw_response"
	err = en.Append(0xac, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.RawResponse)
	if err != nil {
		err = msgp.WrapError(err, "RawResponse")
		return
	}
	// write "ip_address"
	err = en.Append(0xaa, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.IPAddress)
	if err != nil {
		err = msgp.WrapError(err, "IPAddress")
		return
	}
	// write "geo"
	err = en.Append(0xa3, 0x67, 0x65, 0x6f)
	if err != nil {
		return
	}
	err = z.Geo.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Geo")
		return
	}
	// write "network"
	err = en.Append(0xa7, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b)
	if err != nil {
		return
	}
	err = z.Network.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Network")
		return
	}
	// write "latency"
	err = en.Append(0xa7, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	// map header, size 2
	// write "total"
	err = en.Append(0x82, 0xa5, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Latency.Total)
	if err != nil {
		err = msgp.WrapError(err, "Latency", "Total")
		return
	}
	// write "upstream"
	err = en.Append(0xa8, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Latency.Upstream)
	if err != nil {
		err = msgp.WrapError(err, "Latency", "Upstream")
		return
	}
	// write "tags"
	err = en.Append(0xa4, 0x74, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Tags)))
	if err != nil {
		err = msgp.WrapError(err, "Tags")
		return
	}
	for za0001 := range z.Tags {
		err = en.WriteString(z.Tags[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0001)
			return
		}
	}
	// write "alias"
	err = en.Append(0xa5, 0x61, 0x6c, 0x69, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Alias)
	if err != nil {
		err = msgp.WrapError(err, "Alias")
		return
	}
	// write "track_path"
	err = en.Append(0xaa, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBool(z.TrackPath)
	if err != nil {
		err = msgp.WrapError(err, "TrackPath")
		return
	}
	// write "expireAt"
	err = en.Append(0xa8, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ExpireAt)
	if err != nil {
		err = msgp.WrapError(err, "ExpireAt")
		return
	}
	// write "new_data"
	err = en.Append(0xa8, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.NewData)
	if err != nil {
		err = msgp.WrapError(err, "NewData")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FutureRecord) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 30
	// string "method"
	o = append(o, 0xde, 0x0, 0x1e, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.Method)
	// string "host"
	o = append(o, 0xa4, 0x68, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.Host)
	// string "path"
	o = append(o, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "raw_path"
	o = append(o, 0xa8, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.RawPath)
	// string "content_length"
	o = append(o, 0xae, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	o = msgp.AppendInt64(o, z.ContentLength)
	// string "user_agent"
	o = append(o, 0xaa, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.UserAgent)
	// string "day"
	o = append(o, 0xa3, 0x64, 0x61, 0x79)
	o = msgp.AppendInt(o, z.Day)
	// string "month"
	o = append(o, 0xa5, 0x6d, 0x6f, 0x6e, 0x74, 0x68)
	o = msgp.AppendInt(o, z.Month)
	// string "year"
	o = append(o, 0xa4, 0x79, 0x65, 0x61, 0x72)
	o = msgp.AppendInt(o, z.Year)
	// string "hour"
	o = append(o, 0xa4, 0x68, 0x6f, 0x75, 0x72)
	o = msgp.AppendInt(o, z.Hour)
	// string "response_code"
	o = append(o, 0xad, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.ResponseCode)
	// string "api_key"
	o = append(o, 0xa7, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.APIKey)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendTime(o, z.TimeStamp)
	// string "api_version"
	o = append(o, 0xab, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.APIVersion)
	// string "api_name"
	o = append(o, 0xa8, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.APIName)
	// string "api_id"
	o = append(o, 0xa6, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.APIID)
	// string "org_id"
	o = append(o, 0xa6, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.OrgID)
	// string "oauth_id"
	o = append(o, 0xa8, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.OauthID)
	// string "request_time"
	o = append(o, 0xac, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.RequestTime)
	// string "raw_request"
	o = append(o, 0xab, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74)
	o = msgp.AppendString(o, z.RawRequest)
	// string "raw_response"
	o = append(o, 0xac, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
	o = msgp.AppendString(o, z.RawResponse)
	// string "ip_address"
	o = append(o, 0xaa, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.IPAddress)
	// string "geo"
	o = append(o, 0xa3, 0x67, 0x65, 0x6f)
	o, err = z.Geo.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Geo")
		return
	}
	// string "network"
	o = append(o, 0xa7, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b)
	o, err = z.Network.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Network")
		return
	}
	// string "latency"
	o = append(o, 0xa7, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79)
	// map header, size 2
	// string "total"
	o = append(o, 0x82, 0xa5, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendInt64(o, z.Latency.Total)
	// string "upstream"
	o = append(o, 0xa8, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.Latency.Upstream)
	// string "tags"
	o = append(o, 0xa4, 0x74, 0x61, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Tags)))
	for za0001 := range z.Tags {
		o = msgp.AppendString(o, z.Tags[za0001])
	}
	// string "alias"
	o = append(o, 0xa5, 0x61, 0x6c, 0x69, 0x61, 0x73)
	o = msgp.AppendString(o, z.Alias)
	// string "track_path"
	o = append(o, 0xaa, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendBool(o, z.TrackPath)
	// string "expireAt"
	o = append(o, 0xa8, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74)
	o = msgp.AppendTime(o, z.ExpireAt)
	// string "new_data"
	o = append(o, 0xa8, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendString(o, z.NewData)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FutureRecord) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "method":
			z.Method, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "host":
			z.Host, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "raw_path":
			z.RawPath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawPath")
				return
			}
		case "content_length":
			z.ContentLength, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContentLength")
				return
			}
		case "user_agent":
			z.UserAgent, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
		case "day":
			z.Day, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Day")
				return
			}
		case "month":
			z.Month, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Month")
				return
			}
		case "year":
			z.Year, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Year")
				return
			}
		case "hour":
			z.Hour, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hour")
				return
			}
		case "response_code":
			z.ResponseCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ResponseCode")
				return
			}
		case "api_key":
			z.APIKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIKey")
				return
			}
		case "timestamp":
			z.TimeStamp, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeStamp")
				return
			}
		case "api_version":
			z.APIVersion, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIVersion")
				return
			}
		case "api_name":
			z.APIName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIName")
				return
			}
		case "api_id":
			z.APIID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIID")
				return
			}
		case "org_id":
			z.OrgID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OrgID")
				return
			}
		case "oauth_id":
			z.OauthID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OauthID")
				return
			}
		case "request_time":
			z.RequestTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestTime")
				return
			}
		case "raw_request":
			z.RawRequest, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawRequest")
				return
			}
		case "raw_response":
			z.RawResponse, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawResponse")
				return
			}
		case "ip_address":
			z.IPAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IPAddress")
				return
			}
		case "geo":
			bts, err = z.Geo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Geo")
				return
			}
		case "network":
			bts, err = z.Network.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Network")
				return
			}
		case "latency":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latency")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Latency")
					return
				}
				switch msgp.UnsafeString(field) {
				case "total":
					z.Latency.Total, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Latency", "Total")
						return
					}
				case "upstream":
					z.Latency.Upstream, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Latency", "Upstream")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Latency")
						return
					}
				}
			}
		case "tags":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0003) {
				z.Tags = (z.Tags)[:zb0003]
			} else {
				z.Tags = make([]string, zb0003)
			}
			for za0001 := range z.Tags {
				z.Tags[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
			}
		case "alias":
			z.Alias, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alias")
				return
			}
		case "track_path":
			z.TrackPath, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TrackPath")
				return
			}
		case "expireAt":
			z.ExpireAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpireAt")
				return
			}
		case "new_data":
			z.NewData, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NewData")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FutureRecord) Msgsize() (s int) {
	s = 3 + 7 + msgp.StringPrefixSize + len(z.Method) + 5 + msgp.StringPrefixSize + len(z.Host) + 5 + msgp.StringPrefixSize + len(z.Path) + 9 + msgp.StringPrefixSize + len(z.RawPath) + 15 + msgp.Int64Size + 11 + msgp.StringPrefixSize + len(z.UserAgent) + 4 + msgp.IntSize + 6 + msgp.IntSize + 5 + msgp.IntSize + 5 + msgp.IntSize + 14 + msgp.IntSize + 8 + msgp.StringPrefixSize + len(z.APIKey) + 10 + msgp.TimeSize + 12 + msgp.StringPrefixSize + len(z.APIVersion) + 9 + msgp.StringPrefixSize + len(z.APIName) + 7 + msgp.StringPrefixSize + len(z.APIID) + 7 + msgp.StringPrefixSize + len(z.OrgID) + 9 + msgp.StringPrefixSize + len(z.OauthID) + 13 + msgp.Int64Size + 12 + msgp.StringPrefixSize + len(z.RawRequest) + 13 + msgp.StringPrefixSize + len(z.RawResponse) + 11 + msgp.StringPrefixSize + len(z.IPAddress) + 4 + z.Geo.Msgsize() + 8 + z.Network.Msgsize() + 8 + 1 + 6 + msgp.Int64Size + 9 + msgp.Int64Size + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Tags {
		s += msgp.StringPrefixSize + len(z.Tags[za0001])
	}
	s += 6 + msgp.StringPrefixSize + len(z.Alias) + 11 + msgp.BoolSize + 9 + msgp.TimeSize + 9 + msgp.StringPrefixSize + len(z.NewData)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GeoData) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "country":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Country")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Country")
					return
				}
				switch msgp.UnsafeString(field) {
				case "iso_code":
					z.Country.ISOCode, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Country", "ISOCode")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Country")
						return
					}
				}
			}
		case "city":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "City")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "City")
					return
				}
				switch msgp.UnsafeString(field) {
				case "geoname_id":
					z.City.GeoNameID, err = dc.ReadUint()
					if err != nil {
						err = msgp.WrapError(err, "City", "GeoNameID")
						return
					}
				case "names":
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "City", "Names")
						return
					}
					if z.City.Names == nil {
						z.City.Names = make(map[string]string, zb0004)
					} else if len(z.City.Names) > 0 {
						for key := range z.City.Names {
							delete(z.City.Names, key)
						}
					}
					for zb0004 > 0 {
						zb0004--
						var za0001 string
						var za0002 string
						za0001, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "City", "Names")
							return
						}
						za0002, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "City", "Names", za0001)
							return
						}
						z.City.Names[za0001] = za0002
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "City")
						return
					}
				}
			}
		case "location":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
			for zb0005 > 0 {
				zb0005--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Location")
					return
				}
				switch msgp.UnsafeString(field) {
				case "latitude":
					z.Location.Latitude, err = dc.ReadFloat64()
					if err != nil {
						err = msgp.WrapError(err, "Location", "Latitude")
						return
					}
				case "longitude":
					z.Location.Longitude, err = dc.ReadFloat64()
					if err != nil {
						err = msgp.WrapError(err, "Location", "Longitude")
						return
					}
				case "time_zone":
					z.Location.TimeZone, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Location", "TimeZone")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Location")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GeoData) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "country"
	err = en.Append(0x83, 0xa7, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79)
	if err != nil {
		return
	}
	// map header, size 1
	// write "iso_code"
	err = en.Append(0x81, 0xa8, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Country.ISOCode)
	if err != nil {
		err = msgp.WrapError(err, "Country", "ISOCode")
		return
	}
	// write "city"
	err = en.Append(0xa4, 0x63, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	// map header, size 2
	// write "geoname_id"
	err = en.Append(0x82, 0xaa, 0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint(z.City.GeoNameID)
	if err != nil {
		err = msgp.WrapError(err, "City", "GeoNameID")
		return
	}
	// write "names"
	err = en.Append(0xa5, 0x6e, 0x61, 0x6d, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.City.Names)))
	if err != nil {
		err = msgp.WrapError(err, "City", "Names")
		return
	}
	for za0001, za0002 := range z.City.Names {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "City", "Names")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "City", "Names", za0001)
			return
		}
	}
	// write "location"
	err = en.Append(0xa8, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	// map header, size 3
	// write "latitude"
	err = en.Append(0x83, 0xa8, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Location.Latitude)
	if err != nil {
		err = msgp.WrapError(err, "Location", "Latitude")
		return
	}
	// write "longitude"
	err = en.Append(0xa9, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Location.Longitude)
	if err != nil {
		err = msgp.WrapError(err, "Location", "Longitude")
		return
	}
	// write "time_zone"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Location.TimeZone)
	if err != nil {
		err = msgp.WrapError(err, "Location", "TimeZone")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GeoData) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "country"
	o = append(o, 0x83, 0xa7, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79)
	// map header, size 1
	// string "iso_code"
	o = append(o, 0x81, 0xa8, 0x69, 0x73, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.Country.ISOCode)
	// string "city"
	o = append(o, 0xa4, 0x63, 0x69, 0x74, 0x79)
	// map header, size 2
	// string "geoname_id"
	o = append(o, 0x82, 0xaa, 0x67, 0x65, 0x6f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64)
	o = msgp.AppendUint(o, z.City.GeoNameID)
	// string "names"
	o = append(o, 0xa5, 0x6e, 0x61, 0x6d, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.City.Names)))
	for za0001, za0002 := range z.City.Names {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "location"
	o = append(o, 0xa8, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	// map header, size 3
	// string "latitude"
	o = append(o, 0x83, 0xa8, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Location.Latitude)
	// string "longitude"
	o = append(o, 0xa9, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65)
	o = msgp.AppendFloat64(o, z.Location.Longitude)
	// string "time_zone"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65)
	o = msgp.AppendString(o, z.Location.TimeZone)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GeoData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "country":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Country")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Country")
					return
				}
				switch msgp.UnsafeString(field) {
				case "iso_code":
					z.Country.ISOCode, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Country", "ISOCode")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Country")
						return
					}
				}
			}
		case "city":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "City")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "City")
					return
				}
				switch msgp.UnsafeString(field) {
				case "geoname_id":
					z.City.GeoNameID, bts, err = msgp.ReadUintBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "City", "GeoNameID")
						return
					}
				case "names":
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "City", "Names")
						return
					}
					if z.City.Names == nil {
						z.City.Names = make(map[string]string, zb0004)
					} else if len(z.City.Names) > 0 {
						for key := range z.City.Names {
							delete(z.City.Names, key)
						}
					}
					for zb0004 > 0 {
						var za0001 string
						var za0002 string
						zb0004--
						za0001, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "City", "Names")
							return
						}
						za0002, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "City", "Names", za0001)
							return
						}
						z.City.Names[za0001] = za0002
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "City")
						return
					}
				}
			}
		case "location":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
			for zb0005 > 0 {
				zb0005--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Location")
					return
				}
				switch msgp.UnsafeString(field) {
				case "latitude":
					z.Location.Latitude, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Location", "Latitude")
						return
					}
				case "longitude":
					z.Location.Longitude, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Location", "Longitude")
						return
					}
				case "time_zone":
					z.Location.TimeZone, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Location", "TimeZone")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Location")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GeoData) Msgsize() (s int) {
	s = 1 + 8 + 1 + 9 + msgp.StringPrefixSize + len(z.Country.ISOCode) + 5 + 1 + 11 + msgp.UintSize + 6 + msgp.MapHeaderSize
	if z.City.Names != nil {
		for za0001, za0002 := range z.City.Names {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 9 + 1 + 9 + msgp.Float64Size + 10 + msgp.Float64Size + 10 + msgp.StringPrefixSize + len(z.Location.TimeZone)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Latency) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "total":
			z.Total, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		case "upstream":
			z.Upstream, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Upstream")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Latency) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "total"
	err = en.Append(0x82, 0xa5, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Total)
	if err != nil {
		err = msgp.WrapError(err, "Total")
		return
	}
	// write "upstream"
	err = en.Append(0xa8, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Upstream)
	if err != nil {
		err = msgp.WrapError(err, "Upstream")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Latency) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "total"
	o = append(o, 0x82, 0xa5, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendInt64(o, z.Total)
	// string "upstream"
	o = append(o, 0xa8, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.Upstream)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Latency) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "total":
			z.Total, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Total")
				return
			}
		case "upstream":
			z.Upstream, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Upstream")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Latency) Msgsize() (s int) {
	s = 1 + 6 + msgp.Int64Size + 9 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NetworkStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "open_connections":
			z.OpenConnections, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "OpenConnections")
				return
			}
		case "closed_connections":
			z.ClosedConnection, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ClosedConnection")
				return
			}
		case "bytes_in":
			z.BytesIn, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "BytesIn")
				return
			}
		case "bytes_out":
			z.BytesOut, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "BytesOut")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *NetworkStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "open_connections"
	err = en.Append(0x84, 0xb0, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpenConnections)
	if err != nil {
		err = msgp.WrapError(err, "OpenConnections")
		return
	}
	// write "closed_connections"
	err = en.Append(0xb2, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ClosedConnection)
	if err != nil {
		err = msgp.WrapError(err, "ClosedConnection")
		return
	}
	// write "bytes_in"
	err = en.Append(0xa8, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BytesIn)
	if err != nil {
		err = msgp.WrapError(err, "BytesIn")
		return
	}
	// write "bytes_out"
	err = en.Append(0xa9, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BytesOut)
	if err != nil {
		err = msgp.WrapError(err, "BytesOut")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NetworkStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "open_connections"
	o = append(o, 0x84, 0xb0, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendInt64(o, z.OpenConnections)
	// string "closed_connections"
	o = append(o, 0xb2, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendInt64(o, z.ClosedConnection)
	// string "bytes_in"
	o = append(o, 0xa8, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.BytesIn)
	// string "bytes_out"
	o = append(o, 0xa9, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74)
	o = msgp.AppendInt64(o, z.BytesOut)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NetworkStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "open_connections":
			z.OpenConnections, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpenConnections")
				return
			}
		case "closed_connections":
			z.ClosedConnection, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClosedConnection")
				return
			}
		case "bytes_in":
			z.BytesIn, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BytesIn")
				return
			}
		case "bytes_out":
			z.BytesOut, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BytesOut")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NetworkStats) Msgsize() (s int) {
	s = 1 + 17 + msgp.Int64Size + 19 + msgp.Int64Size + 9 + msgp.Int64Size + 10 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Record) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "method":
			z.Method, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "host":
			z.Host, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "path":
			z.Path, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "raw_path":
			z.RawPath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RawPath")
				return
			}
		case "content_length":
			z.ContentLength, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ContentLength")
				return
			}
		case "user_agent":
			z.UserAgent, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
		case "day":
			z.Day, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Day")
				return
			}
		case "month":
			z.Month, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Month")
				return
			}
		case "year":
			z.Year, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Year")
				return
			}
		case "hour":
			z.Hour, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Hour")
				return
			}
		case "response_code":
			z.ResponseCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ResponseCode")
				return
			}
		case "api_key":
			z.APIKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIKey")
				return
			}
		case "timestamp":
			z.TimeStamp, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "TimeStamp")
				return
			}
		case "api_version":
			z.APIVersion, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIVersion")
				return
			}
		case "api_name":
			z.APIName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIName")
				return
			}
		case "api_id":
			z.APIID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "APIID")
				return
			}
		case "org_id":
			z.OrgID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OrgID")
				return
			}
		case "oauth_id":
			z.OauthID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OauthID")
				return
			}
		case "request_time":
			z.RequestTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "RequestTime")
				return
			}
		case "raw_request":
			z.RawRequest, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RawRequest")
				return
			}
		case "raw_response":
			z.RawResponse, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RawResponse")
				return
			}
		case "ip_address":
			z.IPAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IPAddress")
				return
			}
		case "geo":
			err = z.Geo.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Geo")
				return
			}
		case "network":
			err = z.Network.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Network")
				return
			}
		case "latency":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Latency")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Latency")
					return
				}
				switch msgp.UnsafeString(field) {
				case "total":
					z.Latency.Total, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Latency", "Total")
						return
					}
				case "upstream":
					z.Latency.Upstream, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "Latency", "Upstream")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Latency")
						return
					}
				}
			}
		case "tags":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0003) {
				z.Tags = (z.Tags)[:zb0003]
			} else {
				z.Tags = make([]string, zb0003)
			}
			for za0001 := range z.Tags {
				z.Tags[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
			}
		case "alias":
			z.Alias, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Alias")
				return
			}
		case "track_path":
			z.TrackPath, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "TrackPath")
				return
			}
		case "expireAt":
			z.ExpireAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ExpireAt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Record) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 29
	// write "method"
	err = en.Append(0xde, 0x0, 0x1d, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	// write "host"
	err = en.Append(0xa4, 0x68, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Host)
	if err != nil {
		err = msgp.WrapError(err, "Host")
		return
	}
	// write "path"
	err = en.Append(0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	// write "raw_path"
	err = en.Append(0xa8, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.RawPath)
	if err != nil {
		err = msgp.WrapError(err, "RawPath")
		return
	}
	// write "content_length"
	err = en.Append(0xae, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ContentLength)
	if err != nil {
		err = msgp.WrapError(err, "ContentLength")
		return
	}
	// write "user_agent"
	err = en.Append(0xaa, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserAgent)
	if err != nil {
		err = msgp.WrapError(err, "UserAgent")
		return
	}
	// write "day"
	err = en.Append(0xa3, 0x64, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Day)
	if err != nil {
		err = msgp.WrapError(err, "Day")
		return
	}
	// write "month"
	err = en.Append(0xa5, 0x6d, 0x6f, 0x6e, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Month)
	if err != nil {
		err = msgp.WrapError(err, "Month")
		return
	}
	// write "year"
	err = en.Append(0xa4, 0x79, 0x65, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Year)
	if err != nil {
		err = msgp.WrapError(err, "Year")
		return
	}
	// write "hour"
	err = en.Append(0xa4, 0x68, 0x6f, 0x75, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Hour)
	if err != nil {
		err = msgp.WrapError(err, "Hour")
		return
	}
	// write "response_code"
	err = en.Append(0xad, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ResponseCode)
	if err != nil {
		err = msgp.WrapError(err, "ResponseCode")
		return
	}
	// write "api_key"
	err = en.Append(0xa7, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIKey)
	if err != nil {
		err = msgp.WrapError(err, "APIKey")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteTime(z.TimeStamp)
	if err != nil {
		err = msgp.WrapError(err, "TimeStamp")
		return
	}
	// write "api_version"
	err = en.Append(0xab, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIVersion)
	if err != nil {
		err = msgp.WrapError(err, "APIVersion")
		return
	}
	// write "api_name"
	err = en.Append(0xa8, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIName)
	if err != nil {
		err = msgp.WrapError(err, "APIName")
		return
	}
	// write "api_id"
	err = en.Append(0xa6, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.APIID)
	if err != nil {
		err = msgp.WrapError(err, "APIID")
		return
	}
	// write "org_id"
	err = en.Append(0xa6, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.OrgID)
	if err != nil {
		err = msgp.WrapError(err, "OrgID")
		return
	}
	// write "oauth_id"
	err = en.Append(0xa8, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.OauthID)
	if err != nil {
		err = msgp.WrapError(err, "OauthID")
		return
	}
	// write "request_time"
	err = en.Append(0xac, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.RequestTime)
	if err != nil {
		err = msgp.WrapError(err, "RequestTime")
		return
	}
	// write "raw_request"
	err = en.Append(0xab, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.RawRequest)
	if err != nil {
		err = msgp.WrapError(err, "RawRequest")
		return
	}
	// write "raw_response"
	err = en.Append(0xac, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.RawResponse)
	if err != nil {
		err = msgp.WrapError(err, "RawResponse")
		return
	}
	// write "ip_address"
	err = en.Append(0xaa, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.IPAddress)
	if err != nil {
		err = msgp.WrapError(err, "IPAddress")
		return
	}
	// write "geo"
	err = en.Append(0xa3, 0x67, 0x65, 0x6f)
	if err != nil {
		return
	}
	err = z.Geo.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Geo")
		return
	}
	// write "network"
	err = en.Append(0xa7, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b)
	if err != nil {
		return
	}
	err = z.Network.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Network")
		return
	}
	// write "latency"
	err = en.Append(0xa7, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	// map header, size 2
	// write "total"
	err = en.Append(0x82, 0xa5, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Latency.Total)
	if err != nil {
		err = msgp.WrapError(err, "Latency", "Total")
		return
	}
	// write "upstream"
	err = en.Append(0xa8, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Latency.Upstream)
	if err != nil {
		err = msgp.WrapError(err, "Latency", "Upstream")
		return
	}
	// write "tags"
	err = en.Append(0xa4, 0x74, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Tags)))
	if err != nil {
		err = msgp.WrapError(err, "Tags")
		return
	}
	for za0001 := range z.Tags {
		err = en.WriteString(z.Tags[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0001)
			return
		}
	}
	// write "alias"
	err = en.Append(0xa5, 0x61, 0x6c, 0x69, 0x61, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Alias)
	if err != nil {
		err = msgp.WrapError(err, "Alias")
		return
	}
	// write "track_path"
	err = en.Append(0xaa, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBool(z.TrackPath)
	if err != nil {
		err = msgp.WrapError(err, "TrackPath")
		return
	}
	// write "expireAt"
	err = en.Append(0xa8, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ExpireAt)
	if err != nil {
		err = msgp.WrapError(err, "ExpireAt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Record) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 29
	// string "method"
	o = append(o, 0xde, 0x0, 0x1d, 0xa6, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.Method)
	// string "host"
	o = append(o, 0xa4, 0x68, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.Host)
	// string "path"
	o = append(o, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "raw_path"
	o = append(o, 0xa8, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.RawPath)
	// string "content_length"
	o = append(o, 0xae, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	o = msgp.AppendInt64(o, z.ContentLength)
	// string "user_agent"
	o = append(o, 0xaa, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.UserAgent)
	// string "day"
	o = append(o, 0xa3, 0x64, 0x61, 0x79)
	o = msgp.AppendInt(o, z.Day)
	// string "month"
	o = append(o, 0xa5, 0x6d, 0x6f, 0x6e, 0x74, 0x68)
	o = msgp.AppendInt(o, z.Month)
	// string "year"
	o = append(o, 0xa4, 0x79, 0x65, 0x61, 0x72)
	o = msgp.AppendInt(o, z.Year)
	// string "hour"
	o = append(o, 0xa4, 0x68, 0x6f, 0x75, 0x72)
	o = msgp.AppendInt(o, z.Hour)
	// string "response_code"
	o = append(o, 0xad, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.ResponseCode)
	// string "api_key"
	o = append(o, 0xa7, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.APIKey)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendTime(o, z.TimeStamp)
	// string "api_version"
	o = append(o, 0xab, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.APIVersion)
	// string "api_name"
	o = append(o, 0xa8, 0x61, 0x70, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.APIName)
	// string "api_id"
	o = append(o, 0xa6, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.APIID)
	// string "org_id"
	o = append(o, 0xa6, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.OrgID)
	// string "oauth_id"
	o = append(o, 0xa8, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.OauthID)
	// string "request_time"
	o = append(o, 0xac, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.RequestTime)
	// string "raw_request"
	o = append(o, 0xab, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74)
	o = msgp.AppendString(o, z.RawRequest)
	// string "raw_response"
	o = append(o, 0xac, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
	o = msgp.AppendString(o, z.RawResponse)
	// string "ip_address"
	o = append(o, 0xaa, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.IPAddress)
	// string "geo"
	o = append(o, 0xa3, 0x67, 0x65, 0x6f)
	o, err = z.Geo.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Geo")
		return
	}
	// string "network"
	o = append(o, 0xa7, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b)
	o, err = z.Network.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Network")
		return
	}
	// string "latency"
	o = append(o, 0xa7, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79)
	// map header, size 2
	// string "total"
	o = append(o, 0x82, 0xa5, 0x74, 0x6f, 0x74, 0x61, 0x6c)
	o = msgp.AppendInt64(o, z.Latency.Total)
	// string "upstream"
	o = append(o, 0xa8, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d)
	o = msgp.AppendInt64(o, z.Latency.Upstream)
	// string "tags"
	o = append(o, 0xa4, 0x74, 0x61, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Tags)))
	for za0001 := range z.Tags {
		o = msgp.AppendString(o, z.Tags[za0001])
	}
	// string "alias"
	o = append(o, 0xa5, 0x61, 0x6c, 0x69, 0x61, 0x73)
	o = msgp.AppendString(o, z.Alias)
	// string "track_path"
	o = append(o, 0xaa, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendBool(o, z.TrackPath)
	// string "expireAt"
	o = append(o, 0xa8, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74)
	o = msgp.AppendTime(o, z.ExpireAt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Record) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "method":
			z.Method, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Method")
				return
			}
		case "host":
			z.Host, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
		case "raw_path":
			z.RawPath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawPath")
				return
			}
		case "content_length":
			z.ContentLength, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContentLength")
				return
			}
		case "user_agent":
			z.UserAgent, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserAgent")
				return
			}
		case "day":
			z.Day, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Day")
				return
			}
		case "month":
			z.Month, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Month")
				return
			}
		case "year":
			z.Year, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Year")
				return
			}
		case "hour":
			z.Hour, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hour")
				return
			}
		case "response_code":
			z.ResponseCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ResponseCode")
				return
			}
		case "api_key":
			z.APIKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIKey")
				return
			}
		case "timestamp":
			z.TimeStamp, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeStamp")
				return
			}
		case "api_version":
			z.APIVersion, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIVersion")
				return
			}
		case "api_name":
			z.APIName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIName")
				return
			}
		case "api_id":
			z.APIID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "APIID")
				return
			}
		case "org_id":
			z.OrgID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OrgID")
				return
			}
		case "oauth_id":
			z.OauthID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OauthID")
				return
			}
		case "request_time":
			z.RequestTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestTime")
				return
			}
		case "raw_request":
			z.RawRequest, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawRequest")
				return
			}
		case "raw_response":
			z.RawResponse, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RawResponse")
				return
			}
		case "ip_address":
			z.IPAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IPAddress")
				return
			}
		case "geo":
			bts, err = z.Geo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Geo")
				return
			}
		case "network":
			bts, err = z.Network.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Network")
				return
			}
		case "latency":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Latency")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Latency")
					return
				}
				switch msgp.UnsafeString(field) {
				case "total":
					z.Latency.Total, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Latency", "Total")
						return
					}
				case "upstream":
					z.Latency.Upstream, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Latency", "Upstream")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Latency")
						return
					}
				}
			}
		case "tags":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0003) {
				z.Tags = (z.Tags)[:zb0003]
			} else {
				z.Tags = make([]string, zb0003)
			}
			for za0001 := range z.Tags {
				z.Tags[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
			}
		case "alias":
			z.Alias, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alias")
				return
			}
		case "track_path":
			z.TrackPath, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TrackPath")
				return
			}
		case "expireAt":
			z.ExpireAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpireAt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Record) Msgsize() (s int) {
	s = 3 + 7 + msgp.StringPrefixSize + len(z.Method) + 5 + msgp.StringPrefixSize + len(z.Host) + 5 + msgp.StringPrefixSize + len(z.Path) + 9 + msgp.StringPrefixSize + len(z.RawPath) + 15 + msgp.Int64Size + 11 + msgp.StringPrefixSize + len(z.UserAgent) + 4 + msgp.IntSize + 6 + msgp.IntSize + 5 + msgp.IntSize + 5 + msgp.IntSize + 14 + msgp.IntSize + 8 + msgp.StringPrefixSize + len(z.APIKey) + 10 + msgp.TimeSize + 12 + msgp.StringPrefixSize + len(z.APIVersion) + 9 + msgp.StringPrefixSize + len(z.APIName) + 7 + msgp.StringPrefixSize + len(z.APIID) + 7 + msgp.StringPrefixSize + len(z.OrgID) + 9 + msgp.StringPrefixSize + len(z.OauthID) + 13 + msgp.Int64Size + 12 + msgp.StringPrefixSize + len(z.RawRequest) + 13 + msgp.StringPrefixSize + len(z.RawResponse) + 11 + msgp.StringPrefixSize + len(z.IPAddress) + 4 + z.Geo.Msgsize() + 8 + z.Network.Msgsize() + 8 + 1 + 6 + msgp.Int64Size + 9 + msgp.Int64Size + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Tags {
		s += msgp.StringPrefixSize + len(z.Tags[za0001])
	}
	s += 6 + msgp.StringPrefixSize + len(z.Alias) + 11 + msgp.BoolSize + 9 + msgp.TimeSize
	return
}
