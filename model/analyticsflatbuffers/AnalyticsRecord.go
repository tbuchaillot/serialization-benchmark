// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package analyticsflatbuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AnalyticsRecord struct {
	_tab flatbuffers.Table
}

func GetRootAsAnalyticsRecord(buf []byte, offset flatbuffers.UOffsetT) *AnalyticsRecord {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AnalyticsRecord{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAnalyticsRecord(buf []byte, offset flatbuffers.UOffsetT) *AnalyticsRecord {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AnalyticsRecord{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AnalyticsRecord) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AnalyticsRecord) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AnalyticsRecord) Host() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) Method() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) Path() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) RawPath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) ContentLength() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AnalyticsRecord) MutateContentLength(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *AnalyticsRecord) UserAgent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) Day() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AnalyticsRecord) MutateDay(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *AnalyticsRecord) Month() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AnalyticsRecord) MutateMonth(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *AnalyticsRecord) Year() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AnalyticsRecord) MutateYear(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

func (rcv *AnalyticsRecord) Hour() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AnalyticsRecord) MutateHour(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

func (rcv *AnalyticsRecord) ResponseCode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AnalyticsRecord) MutateResponseCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

func (rcv *AnalyticsRecord) ApiKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) ApiVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) ApiName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) ApiId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) OrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) RequestTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AnalyticsRecord) MutateRequestTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

func (rcv *AnalyticsRecord) Latency(obj *Latency) *Latency {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Latency)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *AnalyticsRecord) RawRequest() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) RawResponse() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) IpAddress() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) Geo(obj *GeoData) *GeoData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(GeoData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *AnalyticsRecord) Network(obj *NetworkStats) *NetworkStats {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(NetworkStats)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *AnalyticsRecord) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AnalyticsRecord) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AnalyticsRecord) Alias() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AnalyticsRecord) TrackPath() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *AnalyticsRecord) MutateTrackPath(n bool) bool {
	return rcv._tab.MutateBoolSlot(54, n)
}

func (rcv *AnalyticsRecord) OauthId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func AnalyticsRecordStart(builder *flatbuffers.Builder) {
	builder.StartObject(27)
}
func AnalyticsRecordAddHost(builder *flatbuffers.Builder, host flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(host), 0)
}
func AnalyticsRecordAddMethod(builder *flatbuffers.Builder, method flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(method), 0)
}
func AnalyticsRecordAddPath(builder *flatbuffers.Builder, path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(path), 0)
}
func AnalyticsRecordAddRawPath(builder *flatbuffers.Builder, rawPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(rawPath), 0)
}
func AnalyticsRecordAddContentLength(builder *flatbuffers.Builder, contentLength int64) {
	builder.PrependInt64Slot(4, contentLength, 0)
}
func AnalyticsRecordAddUserAgent(builder *flatbuffers.Builder, userAgent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(userAgent), 0)
}
func AnalyticsRecordAddDay(builder *flatbuffers.Builder, day int32) {
	builder.PrependInt32Slot(6, day, 0)
}
func AnalyticsRecordAddMonth(builder *flatbuffers.Builder, month int32) {
	builder.PrependInt32Slot(7, month, 0)
}
func AnalyticsRecordAddYear(builder *flatbuffers.Builder, year int32) {
	builder.PrependInt32Slot(8, year, 0)
}
func AnalyticsRecordAddHour(builder *flatbuffers.Builder, hour int32) {
	builder.PrependInt32Slot(9, hour, 0)
}
func AnalyticsRecordAddResponseCode(builder *flatbuffers.Builder, responseCode int32) {
	builder.PrependInt32Slot(10, responseCode, 0)
}
func AnalyticsRecordAddApiKey(builder *flatbuffers.Builder, apiKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(apiKey), 0)
}
func AnalyticsRecordAddApiVersion(builder *flatbuffers.Builder, apiVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(apiVersion), 0)
}
func AnalyticsRecordAddApiName(builder *flatbuffers.Builder, apiName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(apiName), 0)
}
func AnalyticsRecordAddApiId(builder *flatbuffers.Builder, apiId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(apiId), 0)
}
func AnalyticsRecordAddOrgId(builder *flatbuffers.Builder, orgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(orgId), 0)
}
func AnalyticsRecordAddRequestTime(builder *flatbuffers.Builder, requestTime int64) {
	builder.PrependInt64Slot(16, requestTime, 0)
}
func AnalyticsRecordAddLatency(builder *flatbuffers.Builder, latency flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(latency), 0)
}
func AnalyticsRecordAddRawRequest(builder *flatbuffers.Builder, rawRequest flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(rawRequest), 0)
}
func AnalyticsRecordAddRawResponse(builder *flatbuffers.Builder, rawResponse flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(rawResponse), 0)
}
func AnalyticsRecordAddIpAddress(builder *flatbuffers.Builder, ipAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(ipAddress), 0)
}
func AnalyticsRecordAddGeo(builder *flatbuffers.Builder, geo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(geo), 0)
}
func AnalyticsRecordAddNetwork(builder *flatbuffers.Builder, network flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(network), 0)
}
func AnalyticsRecordAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(tags), 0)
}
func AnalyticsRecordStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AnalyticsRecordAddAlias(builder *flatbuffers.Builder, alias flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(alias), 0)
}
func AnalyticsRecordAddTrackPath(builder *flatbuffers.Builder, trackPath bool) {
	builder.PrependBoolSlot(25, trackPath, false)
}
func AnalyticsRecordAddOauthId(builder *flatbuffers.Builder, oauthId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(oauthId), 0)
}
func AnalyticsRecordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
